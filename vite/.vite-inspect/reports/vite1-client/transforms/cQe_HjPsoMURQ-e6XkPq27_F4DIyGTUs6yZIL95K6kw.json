{
  "resolvedId": "/Users/rwr/repo/vite/vite/node_modules/.vite/deps/react_jsx-dev-runtime.js",
  "transforms": [
    {
      "name": "vite:optimized-deps",
      "result": "import {\n  __commonJS,\n  require_react\n} from \"./chunk-E6KUT42S.js\";\n\n// node_modules/.pnpm/react@19.1.0/node_modules/react/cjs/react-jsx-dev-runtime.development.js\nvar require_react_jsx_dev_runtime_development = __commonJS({\n  \"node_modules/.pnpm/react@19.1.0/node_modules/react/cjs/react-jsx-dev-runtime.development.js\"(exports) {\n    \"use strict\";\n    (function() {\n      function getComponentNameFromType(type) {\n        if (null == type) return null;\n        if (\"function\" === typeof type)\n          return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;\n        if (\"string\" === typeof type) return type;\n        switch (type) {\n          case REACT_FRAGMENT_TYPE:\n            return \"Fragment\";\n          case REACT_PROFILER_TYPE:\n            return \"Profiler\";\n          case REACT_STRICT_MODE_TYPE:\n            return \"StrictMode\";\n          case REACT_SUSPENSE_TYPE:\n            return \"Suspense\";\n          case REACT_SUSPENSE_LIST_TYPE:\n            return \"SuspenseList\";\n          case REACT_ACTIVITY_TYPE:\n            return \"Activity\";\n        }\n        if (\"object\" === typeof type)\n          switch (\"number\" === typeof type.tag && console.error(\n            \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n          ), type.$$typeof) {\n            case REACT_PORTAL_TYPE:\n              return \"Portal\";\n            case REACT_CONTEXT_TYPE:\n              return (type.displayName || \"Context\") + \".Provider\";\n            case REACT_CONSUMER_TYPE:\n              return (type._context.displayName || \"Context\") + \".Consumer\";\n            case REACT_FORWARD_REF_TYPE:\n              var innerType = type.render;\n              type = type.displayName;\n              type || (type = innerType.displayName || innerType.name || \"\", type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\");\n              return type;\n            case REACT_MEMO_TYPE:\n              return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || \"Memo\";\n            case REACT_LAZY_TYPE:\n              innerType = type._payload;\n              type = type._init;\n              try {\n                return getComponentNameFromType(type(innerType));\n              } catch (x) {\n              }\n          }\n        return null;\n      }\n      function testStringCoercion(value) {\n        return \"\" + value;\n      }\n      function checkKeyStringCoercion(value) {\n        try {\n          testStringCoercion(value);\n          var JSCompiler_inline_result = false;\n        } catch (e) {\n          JSCompiler_inline_result = true;\n        }\n        if (JSCompiler_inline_result) {\n          JSCompiler_inline_result = console;\n          var JSCompiler_temp_const = JSCompiler_inline_result.error;\n          var JSCompiler_inline_result$jscomp$0 = \"function\" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\";\n          JSCompiler_temp_const.call(\n            JSCompiler_inline_result,\n            \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n            JSCompiler_inline_result$jscomp$0\n          );\n          return testStringCoercion(value);\n        }\n      }\n      function getTaskName(type) {\n        if (type === REACT_FRAGMENT_TYPE) return \"<>\";\n        if (\"object\" === typeof type && null !== type && type.$$typeof === REACT_LAZY_TYPE)\n          return \"<...>\";\n        try {\n          var name = getComponentNameFromType(type);\n          return name ? \"<\" + name + \">\" : \"<...>\";\n        } catch (x) {\n          return \"<...>\";\n        }\n      }\n      function getOwner() {\n        var dispatcher = ReactSharedInternals.A;\n        return null === dispatcher ? null : dispatcher.getOwner();\n      }\n      function UnknownOwner() {\n        return Error(\"react-stack-top-frame\");\n      }\n      function hasValidKey(config) {\n        if (hasOwnProperty.call(config, \"key\")) {\n          var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n          if (getter && getter.isReactWarning) return false;\n        }\n        return void 0 !== config.key;\n      }\n      function defineKeyPropWarningGetter(props, displayName) {\n        function warnAboutAccessingKey() {\n          specialPropKeyWarningShown || (specialPropKeyWarningShown = true, console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n        }\n        warnAboutAccessingKey.isReactWarning = true;\n        Object.defineProperty(props, \"key\", {\n          get: warnAboutAccessingKey,\n          configurable: true\n        });\n      }\n      function elementRefGetterWithDeprecationWarning() {\n        var componentName = getComponentNameFromType(this.type);\n        didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = true, console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n        componentName = this.props.ref;\n        return void 0 !== componentName ? componentName : null;\n      }\n      function ReactElement(type, key, self, source, owner, props, debugStack, debugTask) {\n        self = props.ref;\n        type = {\n          $$typeof: REACT_ELEMENT_TYPE,\n          type,\n          key,\n          props,\n          _owner: owner\n        };\n        null !== (void 0 !== self ? self : null) ? Object.defineProperty(type, \"ref\", {\n          enumerable: false,\n          get: elementRefGetterWithDeprecationWarning\n        }) : Object.defineProperty(type, \"ref\", { enumerable: false, value: null });\n        type._store = {};\n        Object.defineProperty(type._store, \"validated\", {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: 0\n        });\n        Object.defineProperty(type, \"_debugInfo\", {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: null\n        });\n        Object.defineProperty(type, \"_debugStack\", {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: debugStack\n        });\n        Object.defineProperty(type, \"_debugTask\", {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: debugTask\n        });\n        Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n        return type;\n      }\n      function jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self, debugStack, debugTask) {\n        var children = config.children;\n        if (void 0 !== children)\n          if (isStaticChildren)\n            if (isArrayImpl(children)) {\n              for (isStaticChildren = 0; isStaticChildren < children.length; isStaticChildren++)\n                validateChildKeys(children[isStaticChildren]);\n              Object.freeze && Object.freeze(children);\n            } else\n              console.error(\n                \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n              );\n          else validateChildKeys(children);\n        if (hasOwnProperty.call(config, \"key\")) {\n          children = getComponentNameFromType(type);\n          var keys = Object.keys(config).filter(function(k) {\n            return \"key\" !== k;\n          });\n          isStaticChildren = 0 < keys.length ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n          didWarnAboutKeySpread[children + isStaticChildren] || (keys = 0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\", console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ), didWarnAboutKeySpread[children + isStaticChildren] = true);\n        }\n        children = null;\n        void 0 !== maybeKey && (checkKeyStringCoercion(maybeKey), children = \"\" + maybeKey);\n        hasValidKey(config) && (checkKeyStringCoercion(config.key), children = \"\" + config.key);\n        if (\"key\" in config) {\n          maybeKey = {};\n          for (var propName in config)\n            \"key\" !== propName && (maybeKey[propName] = config[propName]);\n        } else maybeKey = config;\n        children && defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type ? type.displayName || type.name || \"Unknown\" : type\n        );\n        return ReactElement(\n          type,\n          children,\n          self,\n          source,\n          getOwner(),\n          maybeKey,\n          debugStack,\n          debugTask\n        );\n      }\n      function validateChildKeys(node) {\n        \"object\" === typeof node && null !== node && node.$$typeof === REACT_ELEMENT_TYPE && node._store && (node._store.validated = 1);\n      }\n      var React = require_react(), REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"), REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"), REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"), REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"), REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n      Symbol.for(\"react.provider\");\n      var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"), REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"), REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"), REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"), REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"), REACT_MEMO_TYPE = Symbol.for(\"react.memo\"), REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"), REACT_ACTIVITY_TYPE = Symbol.for(\"react.activity\"), REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"), ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, hasOwnProperty = Object.prototype.hasOwnProperty, isArrayImpl = Array.isArray, createTask = console.createTask ? console.createTask : function() {\n        return null;\n      };\n      React = {\n        \"react-stack-bottom-frame\": function(callStackForError) {\n          return callStackForError();\n        }\n      };\n      var specialPropKeyWarningShown;\n      var didWarnAboutElementRef = {};\n      var unknownOwnerDebugStack = React[\"react-stack-bottom-frame\"].bind(\n        React,\n        UnknownOwner\n      )();\n      var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));\n      var didWarnAboutKeySpread = {};\n      exports.Fragment = REACT_FRAGMENT_TYPE;\n      exports.jsxDEV = function(type, config, maybeKey, isStaticChildren, source, self) {\n        var trackActualOwner = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;\n        return jsxDEVImpl(\n          type,\n          config,\n          maybeKey,\n          isStaticChildren,\n          source,\n          self,\n          trackActualOwner ? Error(\"react-stack-top-frame\") : unknownOwnerDebugStack,\n          trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask\n        );\n      };\n    })();\n  }\n});\n\n// node_modules/.pnpm/react@19.1.0/node_modules/react/jsx-dev-runtime.js\nvar require_jsx_dev_runtime = __commonJS({\n  \"node_modules/.pnpm/react@19.1.0/node_modules/react/jsx-dev-runtime.js\"(exports, module) {\n    if (false) {\n      module.exports = null;\n    } else {\n      module.exports = require_react_jsx_dev_runtime_development();\n    }\n  }\n});\nexport default require_jsx_dev_runtime();\n/*! Bundled license information:\n\nreact/cjs/react-jsx-dev-runtime.development.js:\n  (**\n   * @license React\n   * react-jsx-dev-runtime.development.js\n   *\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n*/\n//# sourceMappingURL=react_jsx-dev-runtime.js.map\n",
      "start": 1751213799901,
      "end": 1751213799908,
      "sourcemaps": null
    },
    {
      "name": "vite:css",
      "start": 1751213799908,
      "end": 1751213799908,
      "order": "normal-normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1751213799908,
      "end": 1751213799908,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1751213799908,
      "end": 1751213799908,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker",
      "start": 1751213799908,
      "end": 1751213799908,
      "order": "normal-normal"
    },
    {
      "name": "vite-hooks-logger",
      "result": "import {\n  __commonJS,\n  require_react\n} from \"./chunk-E6KUT42S.js\";\n\n// node_modules/.pnpm/react@19.1.0/node_modules/react/cjs/react-jsx-dev-runtime.development.js\nvar require_react_jsx_dev_runtime_development = __commonJS({\n  \"node_modules/.pnpm/react@19.1.0/node_modules/react/cjs/react-jsx-dev-runtime.development.js\"(exports) {\n    \"use strict\";\n    (function() {\n      function getComponentNameFromType(type) {\n        if (null == type) return null;\n        if (\"function\" === typeof type)\n          return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;\n        if (\"string\" === typeof type) return type;\n        switch (type) {\n          case REACT_FRAGMENT_TYPE:\n            return \"Fragment\";\n          case REACT_PROFILER_TYPE:\n            return \"Profiler\";\n          case REACT_STRICT_MODE_TYPE:\n            return \"StrictMode\";\n          case REACT_SUSPENSE_TYPE:\n            return \"Suspense\";\n          case REACT_SUSPENSE_LIST_TYPE:\n            return \"SuspenseList\";\n          case REACT_ACTIVITY_TYPE:\n            return \"Activity\";\n        }\n        if (\"object\" === typeof type)\n          switch (\"number\" === typeof type.tag && console.error(\n            \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n          ), type.$$typeof) {\n            case REACT_PORTAL_TYPE:\n              return \"Portal\";\n            case REACT_CONTEXT_TYPE:\n              return (type.displayName || \"Context\") + \".Provider\";\n            case REACT_CONSUMER_TYPE:\n              return (type._context.displayName || \"Context\") + \".Consumer\";\n            case REACT_FORWARD_REF_TYPE:\n              var innerType = type.render;\n              type = type.displayName;\n              type || (type = innerType.displayName || innerType.name || \"\", type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\");\n              return type;\n            case REACT_MEMO_TYPE:\n              return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || \"Memo\";\n            case REACT_LAZY_TYPE:\n              innerType = type._payload;\n              type = type._init;\n              try {\n                return getComponentNameFromType(type(innerType));\n              } catch (x) {\n              }\n          }\n        return null;\n      }\n      function testStringCoercion(value) {\n        return \"\" + value;\n      }\n      function checkKeyStringCoercion(value) {\n        try {\n          testStringCoercion(value);\n          var JSCompiler_inline_result = false;\n        } catch (e) {\n          JSCompiler_inline_result = true;\n        }\n        if (JSCompiler_inline_result) {\n          JSCompiler_inline_result = console;\n          var JSCompiler_temp_const = JSCompiler_inline_result.error;\n          var JSCompiler_inline_result$jscomp$0 = \"function\" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\";\n          JSCompiler_temp_const.call(\n            JSCompiler_inline_result,\n            \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n            JSCompiler_inline_result$jscomp$0\n          );\n          return testStringCoercion(value);\n        }\n      }\n      function getTaskName(type) {\n        if (type === REACT_FRAGMENT_TYPE) return \"<>\";\n        if (\"object\" === typeof type && null !== type && type.$$typeof === REACT_LAZY_TYPE)\n          return \"<...>\";\n        try {\n          var name = getComponentNameFromType(type);\n          return name ? \"<\" + name + \">\" : \"<...>\";\n        } catch (x) {\n          return \"<...>\";\n        }\n      }\n      function getOwner() {\n        var dispatcher = ReactSharedInternals.A;\n        return null === dispatcher ? null : dispatcher.getOwner();\n      }\n      function UnknownOwner() {\n        return Error(\"react-stack-top-frame\");\n      }\n      function hasValidKey(config) {\n        if (hasOwnProperty.call(config, \"key\")) {\n          var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n          if (getter && getter.isReactWarning) return false;\n        }\n        return void 0 !== config.key;\n      }\n      function defineKeyPropWarningGetter(props, displayName) {\n        function warnAboutAccessingKey() {\n          specialPropKeyWarningShown || (specialPropKeyWarningShown = true, console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n        }\n        warnAboutAccessingKey.isReactWarning = true;\n        Object.defineProperty(props, \"key\", {\n          get: warnAboutAccessingKey,\n          configurable: true\n        });\n      }\n      function elementRefGetterWithDeprecationWarning() {\n        var componentName = getComponentNameFromType(this.type);\n        didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = true, console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n        componentName = this.props.ref;\n        return void 0 !== componentName ? componentName : null;\n      }\n      function ReactElement(type, key, self, source, owner, props, debugStack, debugTask) {\n        self = props.ref;\n        type = {\n          $$typeof: REACT_ELEMENT_TYPE,\n          type,\n          key,\n          props,\n          _owner: owner\n        };\n        null !== (void 0 !== self ? self : null) ? Object.defineProperty(type, \"ref\", {\n          enumerable: false,\n          get: elementRefGetterWithDeprecationWarning\n        }) : Object.defineProperty(type, \"ref\", { enumerable: false, value: null });\n        type._store = {};\n        Object.defineProperty(type._store, \"validated\", {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: 0\n        });\n        Object.defineProperty(type, \"_debugInfo\", {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: null\n        });\n        Object.defineProperty(type, \"_debugStack\", {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: debugStack\n        });\n        Object.defineProperty(type, \"_debugTask\", {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: debugTask\n        });\n        Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n        return type;\n      }\n      function jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self, debugStack, debugTask) {\n        var children = config.children;\n        if (void 0 !== children)\n          if (isStaticChildren)\n            if (isArrayImpl(children)) {\n              for (isStaticChildren = 0; isStaticChildren < children.length; isStaticChildren++)\n                validateChildKeys(children[isStaticChildren]);\n              Object.freeze && Object.freeze(children);\n            } else\n              console.error(\n                \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n              );\n          else validateChildKeys(children);\n        if (hasOwnProperty.call(config, \"key\")) {\n          children = getComponentNameFromType(type);\n          var keys = Object.keys(config).filter(function(k) {\n            return \"key\" !== k;\n          });\n          isStaticChildren = 0 < keys.length ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n          didWarnAboutKeySpread[children + isStaticChildren] || (keys = 0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\", console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ), didWarnAboutKeySpread[children + isStaticChildren] = true);\n        }\n        children = null;\n        void 0 !== maybeKey && (checkKeyStringCoercion(maybeKey), children = \"\" + maybeKey);\n        hasValidKey(config) && (checkKeyStringCoercion(config.key), children = \"\" + config.key);\n        if (\"key\" in config) {\n          maybeKey = {};\n          for (var propName in config)\n            \"key\" !== propName && (maybeKey[propName] = config[propName]);\n        } else maybeKey = config;\n        children && defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type ? type.displayName || type.name || \"Unknown\" : type\n        );\n        return ReactElement(\n          type,\n          children,\n          self,\n          source,\n          getOwner(),\n          maybeKey,\n          debugStack,\n          debugTask\n        );\n      }\n      function validateChildKeys(node) {\n        \"object\" === typeof node && null !== node && node.$$typeof === REACT_ELEMENT_TYPE && node._store && (node._store.validated = 1);\n      }\n      var React = require_react(), REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"), REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"), REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"), REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"), REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n      Symbol.for(\"react.provider\");\n      var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"), REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"), REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"), REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"), REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"), REACT_MEMO_TYPE = Symbol.for(\"react.memo\"), REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"), REACT_ACTIVITY_TYPE = Symbol.for(\"react.activity\"), REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"), ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, hasOwnProperty = Object.prototype.hasOwnProperty, isArrayImpl = Array.isArray, createTask = console.createTask ? console.createTask : function() {\n        return null;\n      };\n      React = {\n        \"react-stack-bottom-frame\": function(callStackForError) {\n          return callStackForError();\n        }\n      };\n      var specialPropKeyWarningShown;\n      var didWarnAboutElementRef = {};\n      var unknownOwnerDebugStack = React[\"react-stack-bottom-frame\"].bind(\n        React,\n        UnknownOwner\n      )();\n      var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));\n      var didWarnAboutKeySpread = {};\n      exports.Fragment = REACT_FRAGMENT_TYPE;\n      exports.jsxDEV = function(type, config, maybeKey, isStaticChildren, source, self) {\n        var trackActualOwner = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;\n        return jsxDEVImpl(\n          type,\n          config,\n          maybeKey,\n          isStaticChildren,\n          source,\n          self,\n          trackActualOwner ? Error(\"react-stack-top-frame\") : unknownOwnerDebugStack,\n          trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask\n        );\n      };\n    })();\n  }\n});\n\n// node_modules/.pnpm/react@19.1.0/node_modules/react/jsx-dev-runtime.js\nvar require_jsx_dev_runtime = __commonJS({\n  \"node_modules/.pnpm/react@19.1.0/node_modules/react/jsx-dev-runtime.js\"(exports, module) {\n    if (false) {\n      module.exports = null;\n    } else {\n      module.exports = require_react_jsx_dev_runtime_development();\n    }\n  }\n});\nexport default require_jsx_dev_runtime();\n/*! Bundled license information:\n\nreact/cjs/react-jsx-dev-runtime.development.js:\n  (**\n   * @license React\n   * react-jsx-dev-runtime.development.js\n   *\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n*/\n//# sourceMappingURL=react_jsx-dev-runtime.js.map\n",
      "start": 1751213799908,
      "end": 1751213799908,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite-plugin-svgr",
      "start": 1751213799908,
      "end": 1751213799908,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1751213799908,
      "end": 1751213799908,
      "order": "normal-normal"
    },
    {
      "name": "vite:css-post",
      "start": 1751213799908,
      "end": 1751213799908,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1751213799908,
      "end": 1751213799908,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1751213799908,
      "end": 1751213799908,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1751213799908,
      "end": 1751213799908,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1751213799908,
      "end": 1751213799908,
      "order": "normal-normal"
    },
    {
      "name": "vite:client-inject",
      "start": 1751213799908,
      "end": 1751213799908,
      "order": "normal"
    },
    {
      "name": "vite:css-analysis",
      "start": 1751213799908,
      "end": 1751213799908,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-analysis",
      "result": "import {\n  __commonJS,\n  require_react\n} from \"/node_modules/.vite/deps/chunk-E6KUT42S.js?v=f4608964\";\n\n// node_modules/.pnpm/react@19.1.0/node_modules/react/cjs/react-jsx-dev-runtime.development.js\nvar require_react_jsx_dev_runtime_development = __commonJS({\n  \"node_modules/.pnpm/react@19.1.0/node_modules/react/cjs/react-jsx-dev-runtime.development.js\"(exports) {\n    \"use strict\";\n    (function() {\n      function getComponentNameFromType(type) {\n        if (null == type) return null;\n        if (\"function\" === typeof type)\n          return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;\n        if (\"string\" === typeof type) return type;\n        switch (type) {\n          case REACT_FRAGMENT_TYPE:\n            return \"Fragment\";\n          case REACT_PROFILER_TYPE:\n            return \"Profiler\";\n          case REACT_STRICT_MODE_TYPE:\n            return \"StrictMode\";\n          case REACT_SUSPENSE_TYPE:\n            return \"Suspense\";\n          case REACT_SUSPENSE_LIST_TYPE:\n            return \"SuspenseList\";\n          case REACT_ACTIVITY_TYPE:\n            return \"Activity\";\n        }\n        if (\"object\" === typeof type)\n          switch (\"number\" === typeof type.tag && console.error(\n            \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n          ), type.$$typeof) {\n            case REACT_PORTAL_TYPE:\n              return \"Portal\";\n            case REACT_CONTEXT_TYPE:\n              return (type.displayName || \"Context\") + \".Provider\";\n            case REACT_CONSUMER_TYPE:\n              return (type._context.displayName || \"Context\") + \".Consumer\";\n            case REACT_FORWARD_REF_TYPE:\n              var innerType = type.render;\n              type = type.displayName;\n              type || (type = innerType.displayName || innerType.name || \"\", type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\");\n              return type;\n            case REACT_MEMO_TYPE:\n              return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || \"Memo\";\n            case REACT_LAZY_TYPE:\n              innerType = type._payload;\n              type = type._init;\n              try {\n                return getComponentNameFromType(type(innerType));\n              } catch (x) {\n              }\n          }\n        return null;\n      }\n      function testStringCoercion(value) {\n        return \"\" + value;\n      }\n      function checkKeyStringCoercion(value) {\n        try {\n          testStringCoercion(value);\n          var JSCompiler_inline_result = false;\n        } catch (e) {\n          JSCompiler_inline_result = true;\n        }\n        if (JSCompiler_inline_result) {\n          JSCompiler_inline_result = console;\n          var JSCompiler_temp_const = JSCompiler_inline_result.error;\n          var JSCompiler_inline_result$jscomp$0 = \"function\" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\";\n          JSCompiler_temp_const.call(\n            JSCompiler_inline_result,\n            \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n            JSCompiler_inline_result$jscomp$0\n          );\n          return testStringCoercion(value);\n        }\n      }\n      function getTaskName(type) {\n        if (type === REACT_FRAGMENT_TYPE) return \"<>\";\n        if (\"object\" === typeof type && null !== type && type.$$typeof === REACT_LAZY_TYPE)\n          return \"<...>\";\n        try {\n          var name = getComponentNameFromType(type);\n          return name ? \"<\" + name + \">\" : \"<...>\";\n        } catch (x) {\n          return \"<...>\";\n        }\n      }\n      function getOwner() {\n        var dispatcher = ReactSharedInternals.A;\n        return null === dispatcher ? null : dispatcher.getOwner();\n      }\n      function UnknownOwner() {\n        return Error(\"react-stack-top-frame\");\n      }\n      function hasValidKey(config) {\n        if (hasOwnProperty.call(config, \"key\")) {\n          var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n          if (getter && getter.isReactWarning) return false;\n        }\n        return void 0 !== config.key;\n      }\n      function defineKeyPropWarningGetter(props, displayName) {\n        function warnAboutAccessingKey() {\n          specialPropKeyWarningShown || (specialPropKeyWarningShown = true, console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n        }\n        warnAboutAccessingKey.isReactWarning = true;\n        Object.defineProperty(props, \"key\", {\n          get: warnAboutAccessingKey,\n          configurable: true\n        });\n      }\n      function elementRefGetterWithDeprecationWarning() {\n        var componentName = getComponentNameFromType(this.type);\n        didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = true, console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n        componentName = this.props.ref;\n        return void 0 !== componentName ? componentName : null;\n      }\n      function ReactElement(type, key, self, source, owner, props, debugStack, debugTask) {\n        self = props.ref;\n        type = {\n          $$typeof: REACT_ELEMENT_TYPE,\n          type,\n          key,\n          props,\n          _owner: owner\n        };\n        null !== (void 0 !== self ? self : null) ? Object.defineProperty(type, \"ref\", {\n          enumerable: false,\n          get: elementRefGetterWithDeprecationWarning\n        }) : Object.defineProperty(type, \"ref\", { enumerable: false, value: null });\n        type._store = {};\n        Object.defineProperty(type._store, \"validated\", {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: 0\n        });\n        Object.defineProperty(type, \"_debugInfo\", {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: null\n        });\n        Object.defineProperty(type, \"_debugStack\", {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: debugStack\n        });\n        Object.defineProperty(type, \"_debugTask\", {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: debugTask\n        });\n        Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n        return type;\n      }\n      function jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self, debugStack, debugTask) {\n        var children = config.children;\n        if (void 0 !== children)\n          if (isStaticChildren)\n            if (isArrayImpl(children)) {\n              for (isStaticChildren = 0; isStaticChildren < children.length; isStaticChildren++)\n                validateChildKeys(children[isStaticChildren]);\n              Object.freeze && Object.freeze(children);\n            } else\n              console.error(\n                \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n              );\n          else validateChildKeys(children);\n        if (hasOwnProperty.call(config, \"key\")) {\n          children = getComponentNameFromType(type);\n          var keys = Object.keys(config).filter(function(k) {\n            return \"key\" !== k;\n          });\n          isStaticChildren = 0 < keys.length ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n          didWarnAboutKeySpread[children + isStaticChildren] || (keys = 0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\", console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ), didWarnAboutKeySpread[children + isStaticChildren] = true);\n        }\n        children = null;\n        void 0 !== maybeKey && (checkKeyStringCoercion(maybeKey), children = \"\" + maybeKey);\n        hasValidKey(config) && (checkKeyStringCoercion(config.key), children = \"\" + config.key);\n        if (\"key\" in config) {\n          maybeKey = {};\n          for (var propName in config)\n            \"key\" !== propName && (maybeKey[propName] = config[propName]);\n        } else maybeKey = config;\n        children && defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type ? type.displayName || type.name || \"Unknown\" : type\n        );\n        return ReactElement(\n          type,\n          children,\n          self,\n          source,\n          getOwner(),\n          maybeKey,\n          debugStack,\n          debugTask\n        );\n      }\n      function validateChildKeys(node) {\n        \"object\" === typeof node && null !== node && node.$$typeof === REACT_ELEMENT_TYPE && node._store && (node._store.validated = 1);\n      }\n      var React = require_react(), REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"), REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"), REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"), REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"), REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n      Symbol.for(\"react.provider\");\n      var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"), REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"), REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"), REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"), REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"), REACT_MEMO_TYPE = Symbol.for(\"react.memo\"), REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"), REACT_ACTIVITY_TYPE = Symbol.for(\"react.activity\"), REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"), ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, hasOwnProperty = Object.prototype.hasOwnProperty, isArrayImpl = Array.isArray, createTask = console.createTask ? console.createTask : function() {\n        return null;\n      };\n      React = {\n        \"react-stack-bottom-frame\": function(callStackForError) {\n          return callStackForError();\n        }\n      };\n      var specialPropKeyWarningShown;\n      var didWarnAboutElementRef = {};\n      var unknownOwnerDebugStack = React[\"react-stack-bottom-frame\"].bind(\n        React,\n        UnknownOwner\n      )();\n      var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));\n      var didWarnAboutKeySpread = {};\n      exports.Fragment = REACT_FRAGMENT_TYPE;\n      exports.jsxDEV = function(type, config, maybeKey, isStaticChildren, source, self) {\n        var trackActualOwner = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;\n        return jsxDEVImpl(\n          type,\n          config,\n          maybeKey,\n          isStaticChildren,\n          source,\n          self,\n          trackActualOwner ? Error(\"react-stack-top-frame\") : unknownOwnerDebugStack,\n          trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask\n        );\n      };\n    })();\n  }\n});\n\n// node_modules/.pnpm/react@19.1.0/node_modules/react/jsx-dev-runtime.js\nvar require_jsx_dev_runtime = __commonJS({\n  \"node_modules/.pnpm/react@19.1.0/node_modules/react/jsx-dev-runtime.js\"(exports, module) {\n    if (false) {\n      module.exports = null;\n    } else {\n      module.exports = require_react_jsx_dev_runtime_development();\n    }\n  }\n});\nexport default require_jsx_dev_runtime();\n/*! Bundled license information:\n\nreact/cjs/react-jsx-dev-runtime.development.js:\n  (**\n   * @license React\n   * react-jsx-dev-runtime.development.js\n   *\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n*/\n//# sourceMappingURL=react_jsx-dev-runtime.js.map\n",
      "start": 1751213799908,
      "end": 1751213799908,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
